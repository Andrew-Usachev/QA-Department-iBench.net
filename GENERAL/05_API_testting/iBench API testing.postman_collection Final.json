{
	"info": {
		"_postman_id": "9598657a-56e9-47d2-a9b9-f205e5dda191",
		"name": "iBench API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26298015",
		"_collection_link": "https://restless-zodiac-516942.postman.co/workspace/Ice-CoOL_ik_OFF~2268dc5e-3703-4fb0-97ed-34917c7a4f03/collection/26298015-9598657a-56e9-47d2-a9b9-f205e5dda191?action=share&creator=26298015&source=collection_link"
	},
	"item": [
		{
			"name": "Positive testing",
			"item": [
				{
					"name": "TC1",
					"item": [
						{
							"name": "Create Find Contractors  search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean environment\r",
											"pm.environment.clear();\r",
											"\r",
											"// set AUTHORISATION KEY FOR THE COLLECTION \r",
											"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
											"\r",
											"\r",
											"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
											"// Set ENV URL\r",
											"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
											"\r",
											"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// Lets set SKILL_ID_1 random value\r",
											"var skillId1 = (skillId + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
											"\r",
											"// Lets set SKILL_ID_2 random value\r",
											"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
											"\r",
											"// Lets set SKILL_ID_3 random value\r",
											"var skillId3= (skillId3 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);\r",
											"\r",
											"// // Set random skill from the list\r",
											"// const skillName =[\r",
											"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
											"// ];\r",
											"// // add skill name 0\r",
											"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
											"// add skill name 1\r",
											"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
											"// // add skill name 1\r",
											"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
											"// // add skill name 1\r",
											"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
											"\r",
											"\r",
											"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
											"\r",
											"// const fs = require('fs');\r",
											"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
											"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
											"// pm.environment.set('AUT', authorizationKey);\r",
											"\r",
											"// // Set the URL of the cloud text file\r",
											"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
											"\r",
											"\r",
											"\r",
											"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
											"// pm.environment.set('FN', fName);\r",
											"\r",
											"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
											"// pm.environment.set('LN', lName);\r",
											"\r",
											"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"// pm.environment.set('CMP', comp);\r",
											"\r",
											"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
											"// pm.environment.set('ADR1', add1);\r",
											"\r",
											"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
											"// pm.environment.set('CITY', city);\r",
											"\r",
											"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"// pm.environment.set('CNTR', country);\r",
											"\r",
											"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
											"// pm.environment.set('PHN', phn);\r",
											"\r",
											"// // adding ENV Updated values \r",
											"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"// pm.environment.set('CMP_UPD', compUP);\r",
											"\r",
											"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
											"// pm.environment.set('ADR1_UPD', add1UP);\r",
											"\r",
											"// // return a random iteger from 100 to 900 with 3 digits\r",
											"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
											"\r",
											"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
											"// pm.environment.set('CITY_UPD', cityUP);\r",
											"\r",
											"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
											"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
											"\r",
											"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
											"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
											"\r",
											"// console.log(pm.environment.get(\"ZIP\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has all keys\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");    \r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.search.search_id).to.be.a('number');    \r",
											" });\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"// // Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											"\r",
											"\r",
											"// // Add id to the environment under SEARCH_ID\r",
											"// const responseJson = pm.response.json();\r",
											"\r",
											"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
											"//     const idValue = responseJson.search.search_id;\r",
											"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
											"// }\r",
											"\r",
											"// Parse JSON response body, Extract search_id value, Set environment variable\r",
											"const responseB = pm.response.json();\r",
											"const searchId = responseB.search.search_id;\r",
											"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"// Parse JSON response body, Extract company_id value, Set environment variable\r",
											"const companyId = responseB.search.company_id;\r",
											"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_to",
											"value": "{{HRATE}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										},
										{
											"key": "skills[0][skill_id]",
											"value": "{{SKILL_ID_0}}",
											"type": "text"
										},
										{
											"key": "skills[0][skill_name]",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
											" });\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"// // Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											"\r",
											"\r",
											"// // Add id to the environment under SEARCH_ID\r",
											"// const responseJson = pm.response.json();\r",
											"\r",
											"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
											"//     const idValue = responseJson.search.search_id;\r",
											"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
											"// }\r",
											"\r",
											"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
											"// const responseB = pm.response.json();\r",
											"// const searchId = responseB.search.search_id;\r",
											"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
											"// const companyId = responseB.search.company_id;\r",
											"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_0}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Find Contractors specific search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 15000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has all keys\", function () {\r",
											"    // var jsonResponse = pm.response.json();\r",
											"    var ResponseText = pm.response.text(); \r",
											"    pm.expect(ResponseText).to.include(\"search_id\");\r",
											"    pm.expect(ResponseText).to.include(\"company_id\");\r",
											"    pm.expect(ResponseText).to.include(\"job_title_id\");\r",
											"    pm.expect(ResponseText).to.include(\"description\");\r",
											"    pm.expect(ResponseText).to.include(\"english_level_id\");\r",
											"    pm.expect(ResponseText).to.include(\"experience\");\r",
											"    pm.expect(ResponseText).to.include(\"location\");\r",
											"    pm.expect(ResponseText).to.include(\"position_level_id\");\r",
											"    pm.expect(ResponseText).to.include(\"rate_to\");\r",
											"    pm.expect(ResponseText).to.include(\"main_skill_id\");\r",
											"    pm.expect(ResponseText).to.include(\"main_skill_name\");\r",
											"    pm.expect(ResponseText).to.include(\"vetted\"); //all comapnies or veryfied \r",
											"    // pm.expect(jsonResponse).to.have.property(\"defaultAddressId\");\r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"// Checking that environment consists KEYS sent to the server (partual mach)\r",
											"pm.test(\"New ID is in response\"), function() {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
											"}\r",
											"\r",
											"// Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'Vasya': pm.environment.get(\"LN\"),\r",
											"//         \"Pupkin\": pm.environment.get(\"FN\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show all Find Contactors searches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 ERROR - Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 ERROR - Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 ERROR - bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
											"};\r",
											"\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"New ID is in response\"), function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
											"};\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
											"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Check if response body is in json format\r",
											"pm.test(\"Response should be in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											";\r",
											"// // Check if id is in UUIDs format\r",
											"// pm.test(\"Verify format of id\", function() {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
											"// });\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"});\r",
											"\r",
											"\r",
											"// Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Find Contractors search in marketplace",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Contractors search from marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Find Contractors search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.unset(\"DESCR\", \"ENG_LVL\", \"EXP\", \"JOB_ID\", \"COUNTRY\", \"POS_LVL\", \"HRATE\",\"SKILL_ID_0\", \"VET\")\r",
											"\r",
											"\r",
											"//Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// Lets set SKILL_ID_1 random value\r",
											"var skillId1 = (skillId + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
											"\r",
											"// Lets set SKILL_ID_2 random value\r",
											"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
											"\r",
											"// Lets set SKILL_ID_3 random value\r",
											"var skillId3= (skillId3 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Search updated.\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"    \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_to",
											"value": "{{HRATE}}"
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new skill in editetd search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_2}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Edited search Find Contractors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get('SKILL_ID_0'));\r",
											"    pm.expect(jsonData.searches[0].location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.searches[0].description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.searches[0].vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.searches[0].experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    //pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');  \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Contractors search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										},
										{
											"key": "company_id",
											"value": "{{COMPANY_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Contractors search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests[\"Bad request, 400 OK\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Search not found or do not belong to you\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}results?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Contractors search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 400 OK'] = responseCode.code === 400; // response 200 -is a bug issue related to data\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
											"});\r",
											"``\r",
											"// // making sure response body has ID key\r",
											"// pm.test(\"Body response has ID key\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));    \r",
											"// });\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    // pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors It should return error response cause serch id was deleted\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// // Check LN_UPD from the ENV mach to the body response\r",
											"// pm.test(\"Check LN_UPD Mach\", function () {\r",
											"//     var jsonText = pm.response.text();\r",
											"//     pm.expect(jsonText).to.include(pm.environment.get(\"LN_UPD\"));\r",
											"// });\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"// pm.test(\"Response body should be in certain format\", function () {\r",
											"//     var jsonResponse = pm.response.json();\r",
											"//     pm.expect(jsonResponse.address.id).to.be.a('string');    \r",
											"//  });\r",
											"\r",
											"// // Check if response body is in json format\r",
											"//  pm.test(\"Response should be in JSON format\", function() {\r",
											"//     pm.response.to.have.jsonBody();\r",
											"// });\r",
											"\r",
											"// // Check if id is in UUIDs format\r",
											"// pm.test(\"Verify format of id\", function() {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
											"// });\r",
											"\r",
											"//  // checking that header actually consists all necessary lines\r",
											"// pm.test(\"Header is correct\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
											"//     pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"//     pm.response.to.have.header(\"X-Seen-By\");\r",
											"//     pm.response.to.have.header(\"X-Wix-Request-Id\");\r",
											"//     pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
											"//     pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
											"// });\r",
											"\r",
											"// // // Checking if our environment has element that equal certain value\r",
											"// // pm.test(\"Object is contained\", () => {\r",
											"// //     const expectedObject = {\r",
											"// //         'status': pm.environment.get(\"STATUS\"),\r",
											"// //         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"// //     };\r",
											"// //     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// // }); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "1079",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "is_single_developer",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TC2",
					"item": [
						{
							"name": "Create Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.clear();\r",
											"\r",
											"// Added token in enviroment\r",
											"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
											"\r",
											"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
											"// Set ENV URL\r",
											"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
											"\r",
											"// send random text data in 'description' field \r",
											"let DESCRIPTION = pm.variables.replaceIn('{{$randomLoremParagraphs}}')\r",
											"pm.environment.set(\"DESCR\", DESCRIPTION);\r",
											"\r",
											"// send random number data in 'english_level_id\" field\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random()*6) + 0);\r",
											"\r",
											"// send random number data in 'experience\" field\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random()*9) + 0);\r",
											"\r",
											"// send random number data in 'job_title_id\" field\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random()*20) + 0);\r",
											"\r",
											"// send random location data in 'location' field\r",
											"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set(\"COUNTRY\", cntry);\r",
											"\r",
											"// send random number data in 'position_level_id\" field\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random()*3) + 0);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random()*10000) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"SING_DEV\", Math.floor(Math.random()*1) + 1);\r",
											"\r",
											"let benefits = pm.variables.replaceIn('{{$randomBsNoun}}')\r",
											"pm.environment.set(\"BENIF\", benefits);\r",
											"\r",
											"// Set random ENV Skill id that determine certain asigned to number skill. Value from 1 to 239\r",
											"pm.environment.set(\"SKILL_ID_0\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random()*1) + 0);\r",
											"\r",
											"// Set random skill from the list\r",
											"// const skillName =[\r",
											"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
											"\r",
											"// ];\r",
											"\r",
											"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// // Added token in enviroment\r",
											"// pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNiwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDA5OjAyOjMxLjAwMFoiLCJleHAiOjE2ODI2NTk5MTl9.6HUcY4AzFlhbgoiKFf5FBK_B-bc1TLL6tAInI4EvdkU\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// Parse JSON response body, Extract search_id value, Set environment variable\r",
											"const responseB = pm.response.json();\r",
											"const searchId = responseB.search.search_id;\r",
											"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.search_id).to.eql(pm.environment.get('SEARCH_ID').toNumber());\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.company_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.location).to.be.a('string');\r",
											"    pm.expect(jsonData.search.description).to.be.a('string');\r",
											"    pm.expect(jsonData.search.vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.search.experience).to.be.a('number');\r",
											"    pm.expect(jsonData.search.english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.search.benefits).to.be.a('string');  \r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": "{{BENIF}}"
										},
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_month",
											"value": "{{HRATE}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										},
										{
											"key": "is_single_developer",
											"value": "{{SING_DEV}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}?authorization={{AUT}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_0}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Find Employee specefic search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.serch_id).to.eql(pm.environment.get('SEARCH_ID'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{",
											"disabled": true
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show all Find Employee  searches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server responce is correct and as expeced\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string');   \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?is_single_developer={{SING_DEV}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{SING_DEV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Find Employee search in marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Employee search from marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 3000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.unset(\"DESCR\", \"ENG_LVL\", \"EXP\", \"JOB_ID\", \"COUNTRY\", \"POS_LVL\", \"HRATE\",\"SKILL_ID_0\")\r",
											"\r",
											"\r",
											"//Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Search updated.\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"    \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": "{{BENIF}}"
										},
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_month",
											"value": "{{HRATE}}"
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new skill in editetd search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_2}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Edited Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get('SKILL_ID_0'));\r",
											"    pm.expect(jsonData.searches[0].location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.searches[0].description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.searches[0].vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.searches[0].experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    //pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');  \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Emaployee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/search",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Employee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests[\"Bad request, 400 OK\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Search not found or do not belong to you\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}results?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Added token in enviroment",
									"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODMyMjk4MDB9.TtGcUlfsX7LDwvd5tjy01-vROGL83RnvK4AWw36pRdY\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative testing",
			"item": [
				{
					"name": "DELETE DELETED SEARCH CONTRACTOR",
					"item": [
						{
							"name": "Create Find Contractors  search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Clean environment\r",
											"pm.environment.clear();\r",
											"\r",
											"// set AUTHORISATION KEY FOR THE COLLECTION \r",
											"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
											"\r",
											"\r",
											"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
											"// Set ENV URL\r",
											"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
											"\r",
											"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// Lets set SKILL_ID_1 random value\r",
											"var skillId1 = (skillId + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
											"\r",
											"// Lets set SKILL_ID_2 random value\r",
											"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
											"\r",
											"// Lets set SKILL_ID_3 random value\r",
											"var skillId3= (skillId3 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);\r",
											"\r",
											"// // Set random skill from the list\r",
											"// const skillName =[\r",
											"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
											"// ];\r",
											"// // add skill name 0\r",
											"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
											"// add skill name 1\r",
											"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
											"// // add skill name 1\r",
											"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
											"// // add skill name 1\r",
											"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
											"\r",
											"\r",
											"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
											"\r",
											"// const fs = require('fs');\r",
											"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
											"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
											"// pm.environment.set('AUT', authorizationKey);\r",
											"\r",
											"// // Set the URL of the cloud text file\r",
											"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
											"\r",
											"\r",
											"\r",
											"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
											"// pm.environment.set('FN', fName);\r",
											"\r",
											"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
											"// pm.environment.set('LN', lName);\r",
											"\r",
											"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"// pm.environment.set('CMP', comp);\r",
											"\r",
											"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
											"// pm.environment.set('ADR1', add1);\r",
											"\r",
											"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
											"// pm.environment.set('CITY', city);\r",
											"\r",
											"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"// pm.environment.set('CNTR', country);\r",
											"\r",
											"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
											"// pm.environment.set('PHN', phn);\r",
											"\r",
											"// // adding ENV Updated values \r",
											"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"// pm.environment.set('CMP_UPD', compUP);\r",
											"\r",
											"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
											"// pm.environment.set('ADR1_UPD', add1UP);\r",
											"\r",
											"// // return a random iteger from 100 to 900 with 3 digits\r",
											"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
											"\r",
											"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
											"// pm.environment.set('CITY_UPD', cityUP);\r",
											"\r",
											"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
											"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
											"\r",
											"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
											"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
											"\r",
											"// console.log(pm.environment.get(\"ZIP\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has all keys\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");    \r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.search.search_id).to.be.a('number');    \r",
											" });\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"// // Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											"\r",
											"\r",
											"// // Add id to the environment under SEARCH_ID\r",
											"// const responseJson = pm.response.json();\r",
											"\r",
											"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
											"//     const idValue = responseJson.search.search_id;\r",
											"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
											"// }\r",
											"\r",
											"// Parse JSON response body, Extract search_id value, Set environment variable\r",
											"const responseB = pm.response.json();\r",
											"const searchId = responseB.search.search_id;\r",
											"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"// Parse JSON response body, Extract company_id value, Set environment variable\r",
											"const companyId = responseB.search.company_id;\r",
											"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_to",
											"value": "{{HRATE}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										},
										{
											"key": "skills[0][skill_id]",
											"value": "{{SKILL_ID_0}}",
											"type": "text"
										},
										{
											"key": "skills[0][skill_name]",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
											" });\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"// // Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											"\r",
											"\r",
											"// // Add id to the environment under SEARCH_ID\r",
											"// const responseJson = pm.response.json();\r",
											"\r",
											"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
											"//     const idValue = responseJson.search.search_id;\r",
											"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
											"// }\r",
											"\r",
											"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
											"// const responseB = pm.response.json();\r",
											"// const searchId = responseB.search.search_id;\r",
											"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
											"// const companyId = responseB.search.company_id;\r",
											"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_0}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Find Contractors specific search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 15000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"Body response has all keys\", function () {\r",
											"    // var jsonResponse = pm.response.json();\r",
											"    var ResponseText = pm.response.text(); \r",
											"    pm.expect(ResponseText).to.include(\"search_id\");\r",
											"    pm.expect(ResponseText).to.include(\"company_id\");\r",
											"    pm.expect(ResponseText).to.include(\"job_title_id\");\r",
											"    pm.expect(ResponseText).to.include(\"description\");\r",
											"    pm.expect(ResponseText).to.include(\"english_level_id\");\r",
											"    pm.expect(ResponseText).to.include(\"experience\");\r",
											"    pm.expect(ResponseText).to.include(\"location\");\r",
											"    pm.expect(ResponseText).to.include(\"position_level_id\");\r",
											"    pm.expect(ResponseText).to.include(\"rate_to\");\r",
											"    pm.expect(ResponseText).to.include(\"main_skill_id\");\r",
											"    pm.expect(ResponseText).to.include(\"main_skill_name\");\r",
											"    pm.expect(ResponseText).to.include(\"vetted\"); //all comapnies or veryfied \r",
											"    // pm.expect(jsonResponse).to.have.property(\"defaultAddressId\");\r",
											"});\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											" // checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"// Checking that environment consists KEYS sent to the server (partual mach)\r",
											"pm.test(\"New ID is in response\"), function() {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
											"}\r",
											"\r",
											"// Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'Vasya': pm.environment.get(\"LN\"),\r",
											"//         \"Pupkin\": pm.environment.get(\"FN\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show all Find Contactors searches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 ERROR - Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 ERROR - Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 ERROR - bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
											"};\r",
											"\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
											"});\r",
											"\r",
											"// making sure response body has all keys\r",
											"pm.test(\"New ID is in response\"), function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
											"};\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
											"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Check if response body is in json format\r",
											"pm.test(\"Response should be in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											";\r",
											"// // Check if id is in UUIDs format\r",
											"// pm.test(\"Verify format of id\", function() {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
											"// });\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"pm.test(\"Response body should be in certain format\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"    pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
											"});\r",
											"\r",
											"\r",
											"// Checking if our environment has element that equal certain value\r",
											"// pm.test(\"Object is contained\", () => {\r",
											"//     const expectedObject = {\r",
											"//         'status': pm.environment.get(\"STATUS\"),\r",
											"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"//     };\r",
											"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// }); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Find Contractors search in marketplace",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Contractors search from marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Find Contractors search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.unset(\"DESCR\", \"ENG_LVL\", \"EXP\", \"JOB_ID\", \"COUNTRY\", \"POS_LVL\", \"HRATE\",\"SKILL_ID_0\", \"VET\")\r",
											"\r",
											"\r",
											"//Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// Lets set SKILL_ID_1 random value\r",
											"var skillId1 = (skillId + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
											"\r",
											"// Lets set SKILL_ID_2 random value\r",
											"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
											"\r",
											"// Lets set SKILL_ID_3 random value\r",
											"var skillId3= (skillId3 + 43) % 239 + 1;\r",
											"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Search updated.\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"    \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_to",
											"value": "{{HRATE}}"
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new skill in editetd search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_2}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Edited search Find Contractors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get('SKILL_ID_0'));\r",
											"    pm.expect(jsonData.searches[0].location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.searches[0].description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.searches[0].vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.searches[0].experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    //pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');  \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Contractors search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										},
										{
											"key": "company_id",
											"value": "{{COMPANY_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Contractors search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests[\"Bad request, 400 OK\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Search not found or do not belong to you\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}results?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Contractors search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 400 OK'] = responseCode.code === 400; // response 200 -is a bug issue related to data\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"//checking response size\r",
											"pm.test(\"Response size is less than 1000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
											"});\r",
											"``\r",
											"// // making sure response body has ID key\r",
											"// pm.test(\"Body response has ID key\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));    \r",
											"// });\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    // pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors It should return error response cause serch id was deleted\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// // Check LN_UPD from the ENV mach to the body response\r",
											"// pm.test(\"Check LN_UPD Mach\", function () {\r",
											"//     var jsonText = pm.response.text();\r",
											"//     pm.expect(jsonText).to.include(pm.environment.get(\"LN_UPD\"));\r",
											"// });\r",
											"\r",
											"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
											"\r",
											"// pm.test(\"Response body should be in certain format\", function () {\r",
											"//     var jsonResponse = pm.response.json();\r",
											"//     pm.expect(jsonResponse.address.id).to.be.a('string');    \r",
											"//  });\r",
											"\r",
											"// // Check if response body is in json format\r",
											"//  pm.test(\"Response should be in JSON format\", function() {\r",
											"//     pm.response.to.have.jsonBody();\r",
											"// });\r",
											"\r",
											"// // Check if id is in UUIDs format\r",
											"// pm.test(\"Verify format of id\", function() {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
											"// });\r",
											"\r",
											"//  // checking that header actually consists all necessary lines\r",
											"// pm.test(\"Header is correct\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
											"//     pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"//     pm.response.to.have.header(\"X-Seen-By\");\r",
											"//     pm.response.to.have.header(\"X-Wix-Request-Id\");\r",
											"//     pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
											"//     pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
											"// });\r",
											"\r",
											"// // // Checking if our environment has element that equal certain value\r",
											"// // pm.test(\"Object is contained\", () => {\r",
											"// //     const expectedObject = {\r",
											"// //         'status': pm.environment.get(\"STATUS\"),\r",
											"// //         \"complete\": pm.environment.get(\"COMPLETE\")\r",
											"// //     };\r",
											"// //     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"// // }); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "1079",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "is_single_developer",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Contractors search SECOND TIME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										},
										{
											"key": "company_id",
											"value": "{{COMPANY_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE DELETED SEARCH EMPLOYEE",
					"item": [
						{
							"name": "Create Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.clear();\r",
											"\r",
											"// Added token in enviroment\r",
											"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
											"\r",
											"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
											"// Set ENV URL\r",
											"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
											"\r",
											"// send random text data in 'description' field \r",
											"let DESCRIPTION = pm.variables.replaceIn('{{$randomLoremParagraphs}}')\r",
											"pm.environment.set(\"DESCR\", DESCRIPTION);\r",
											"\r",
											"// send random number data in 'english_level_id\" field\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random()*6) + 0);\r",
											"\r",
											"// send random number data in 'experience\" field\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random()*9) + 0);\r",
											"\r",
											"// send random number data in 'job_title_id\" field\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random()*20) + 0);\r",
											"\r",
											"// send random location data in 'location' field\r",
											"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set(\"COUNTRY\", cntry);\r",
											"\r",
											"// send random number data in 'position_level_id\" field\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random()*3) + 0);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random()*10000) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"SING_DEV\", Math.floor(Math.random()*1) + 1);\r",
											"\r",
											"let benefits = pm.variables.replaceIn('{{$randomBsNoun}}')\r",
											"pm.environment.set(\"BENIF\", benefits);\r",
											"\r",
											"// Set random ENV Skill id that determine certain asigned to number skill. Value from 1 to 239\r",
											"pm.environment.set(\"SKILL_ID_0\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random()*1) + 0);\r",
											"\r",
											"// Set random skill from the list\r",
											"// const skillName =[\r",
											"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
											"\r",
											"// ];\r",
											"\r",
											"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// // Added token in enviroment\r",
											"// pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNiwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDA5OjAyOjMxLjAwMFoiLCJleHAiOjE2ODI2NTk5MTl9.6HUcY4AzFlhbgoiKFf5FBK_B-bc1TLL6tAInI4EvdkU\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// Parse JSON response body, Extract search_id value, Set environment variable\r",
											"const responseB = pm.response.json();\r",
											"const searchId = responseB.search.search_id;\r",
											"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.search_id).to.eql(pm.environment.get('SEARCH_ID').toNumber());\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.company_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.location).to.be.a('string');\r",
											"    pm.expect(jsonData.search.description).to.be.a('string');\r",
											"    pm.expect(jsonData.search.vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.search.experience).to.be.a('number');\r",
											"    pm.expect(jsonData.search.english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.search.benefits).to.be.a('string');  \r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": "{{BENIF}}"
										},
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_month",
											"value": "{{HRATE}}"
										},
										{
											"key": "vetted",
											"value": "{{VET}}"
										},
										{
											"key": "is_single_developer",
											"value": "{{SING_DEV}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}?authorization={{AUT}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_0}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Find Employee specefic search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.serch_id).to.eql(pm.environment.get('SEARCH_ID'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{",
											"disabled": true
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show all Find Employee  searches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server responce is correct and as expeced\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string');   \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?is_single_developer={{SING_DEV}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{SING_DEV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Find Employee search in marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Employee search from marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 3000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.unset(\"DESCR\", \"ENG_LVL\", \"EXP\", \"JOB_ID\", \"COUNTRY\", \"POS_LVL\", \"HRATE\",\"SKILL_ID_0\")\r",
											"\r",
											"\r",
											"//Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Search updated.\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"    \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": "{{BENIF}}"
										},
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_month",
											"value": "{{HRATE}}"
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new skill in editetd search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_2}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Edited Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get('SKILL_ID_0'));\r",
											"    pm.expect(jsonData.searches[0].location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.searches[0].description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.searches[0].vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.searches[0].experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    //pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');  \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Emaployee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/search",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Employee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests[\"Bad request, 400 OK\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Search not found or do not belong to you\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}results?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Emaployee search SECOND TIME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "EMPTY BODY(NO VALUES)",
					"item": [
						{
							"name": "Create Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.clear();\r",
											"\r",
											"// Added token in enviroment\r",
											"pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
											"\r",
											"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
											"// Set ENV URL\r",
											"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
											"\r",
											"// send random text data in 'description' field \r",
											"let DESCRIPTION = pm.variables.replaceIn('{{$randomLoremParagraphs}}')\r",
											"pm.environment.set(\"DESCR\", DESCRIPTION);\r",
											"\r",
											"// send random number data in 'english_level_id\" field\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random()*6) + 0);\r",
											"\r",
											"// send random number data in 'experience\" field\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random()*9) + 0);\r",
											"\r",
											"// send random number data in 'job_title_id\" field\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random()*20) + 0);\r",
											"\r",
											"// send random location data in 'location' field\r",
											"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set(\"COUNTRY\", cntry);\r",
											"\r",
											"// send random number data in 'position_level_id\" field\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random()*3) + 0);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random()*10000) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"SING_DEV\", Math.floor(Math.random()*1) + 1);\r",
											"\r",
											"let benefits = pm.variables.replaceIn('{{$randomBsNoun}}')\r",
											"pm.environment.set(\"BENIF\", benefits);\r",
											"\r",
											"// Set random ENV Skill id that determine certain asigned to number skill. Value from 1 to 239\r",
											"pm.environment.set(\"SKILL_ID_0\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// send random number data in 'rate_to\" field\r",
											"pm.environment.set(\"VET\", Math.floor(Math.random()*1) + 0);\r",
											"\r",
											"// Set random skill from the list\r",
											"// const skillName =[\r",
											"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
											"\r",
											"// ];\r",
											"\r",
											"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
											"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// // Added token in enviroment\r",
											"// pm.environment.set(\"AUT\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNiwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDA5OjAyOjMxLjAwMFoiLCJleHAiOjE2ODI2NTk5MTl9.6HUcY4AzFlhbgoiKFf5FBK_B-bc1TLL6tAInI4EvdkU\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// Parse JSON response body, Extract search_id value, Set environment variable\r",
											"const responseB = pm.response.json();\r",
											"const searchId = responseB.search.search_id;\r",
											"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.search_id).to.eql(pm.environment.get('SEARCH_ID').toNumber());\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.company_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.location).to.be.a('string');\r",
											"    pm.expect(jsonData.search.description).to.be.a('string');\r",
											"    pm.expect(jsonData.search.vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.search.experience).to.be.a('number');\r",
											"    pm.expect(jsonData.search.english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.search.rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.search.benefits).to.be.a('string');  \r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": ""
										},
										{
											"key": "english_level_id",
											"value": ""
										},
										{
											"key": "experience",
											"value": ""
										},
										{
											"key": "job_title_id",
											"value": ""
										},
										{
											"key": "location",
											"value": ""
										},
										{
											"key": "position_level_id",
											"value": ""
										},
										{
											"key": "rate_month",
											"value": ""
										},
										{
											"key": "vetted",
											"value": ""
										},
										{
											"key": "is_single_developer",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}?authorization={{AUT}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": ""
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									],
									"query": [
										{
											"key": "authorization",
											"value": "{{AUT}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Find Employee specefic search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct and as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.search.position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.search.location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.search.description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.search.vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.search.rate_month).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.search.experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.search.english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"    pm.expect(jsonData.search.benefits).to.eql(pm.environment.get('BENIF'));\r",
											"    pm.expect(jsonData.search.serch_id).to.eql(pm.environment.get('SEARCH_ID'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{",
											"disabled": true
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show all Find Employee  searches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server responce is correct and as expeced\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_month).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].benefits).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string');   \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?is_single_developer={{SING_DEV}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "is_single_developer",
											"value": "{{SING_DEV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Find Employee search in marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Employee search from marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OK\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 3000B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string'); \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/marketplace/request/developers",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"marketplace",
										"request",
										"developers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear all data in enviroment\r",
											"pm.environment.unset(\"DESCR\", \"ENG_LVL\", \"EXP\", \"JOB_ID\", \"COUNTRY\", \"POS_LVL\", \"HRATE\",\"SKILL_ID_0\")\r",
											"\r",
											"\r",
											"//Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
											"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
											"\r",
											"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
											"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
											"\r",
											"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
											"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
											"pm.environment.set('COUNTRY', loc);\r",
											"\r",
											"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
											"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
											"\r",
											"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
											"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
											"\r",
											"// Lets set SKILL_ID_0 random value\r",
											"let skillId = Math.floor(Math.random() * 239) + 1;\r",
											"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
											"\r",
											"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
											"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
											"\r",
											"// Set ENV location as random Country from Random library\r",
											"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
											"pm.environment.set('DESCR', description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Search updated.\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"    \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "benefits",
											"value": "{{BENIF}}"
										},
										{
											"key": "description",
											"value": "{{DESCR}}"
										},
										{
											"key": "english_level_id",
											"value": "{{ENG_LVL}}"
										},
										{
											"key": "experience",
											"value": "{{EXP}}"
										},
										{
											"key": "job_title_id",
											"value": "{{JOB_ID}}"
										},
										{
											"key": "location",
											"value": "{{COUNTRY}}"
										},
										{
											"key": "position_level_id",
											"value": "{{POS_LVL}}"
										},
										{
											"key": "rate_month",
											"value": "{{HRATE}}"
										},
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}",
									"host": [
										"{{URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new skill in editetd search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.a('string');    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										},
										{
											"key": "skill_id",
											"value": "{{SKILL_ID_2}}"
										}
									]
								},
								"url": {
									"raw": "{{URL}}skills",
									"host": [
										"{{URL}}skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Edited Find Employee search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.be.json;\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"search_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"company_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"job_title_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"position_level_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"main_skill_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"location\");\r",
											"  pm.expect(pm.response.text()).to.include(\"project_duration\");\r",
											"  pm.expect(pm.response.text()).to.include(\"description\");\r",
											"  pm.expect(pm.response.text()).to.include(\"benefits\");\r",
											"  pm.expect(pm.response.text()).to.include(\"vetted\");\r",
											"  pm.expect(pm.response.text()).to.include(\"is_single_developer\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_from\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_to\");\r",
											"  pm.expect(pm.response.text()).to.include(\"rate_month\");\r",
											"  pm.expect(pm.response.text()).to.include(\"experience\", \"english_level_id\", \"found_last_run\",\"market_place_comment\", \"notified_about_new_developers\", \"for_marketplace\", \"status\", \"created\", \"last_search_time\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.eql(pm.environment.get('POS_LVL'));\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get('SKILL_ID_0'));\r",
											"    pm.expect(jsonData.searches[0].location).to.eql(pm.environment.get('COUNTRY'));\r",
											"    pm.expect(jsonData.searches[0].description).to.eql(pm.environment.get('DESCR'));\r",
											"    pm.expect(jsonData.searches[0].vetted).to.eql(pm.environment.get('VET'));\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.eql(pm.environment.get('HRATE'));\r",
											"    pm.expect(jsonData.searches[0].experience).to.eql(pm.environment.get('EXP'));\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.eql(pm.environment.get('ENG_LVL'));\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string');\r",
											"    //pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
											"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
											"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');  \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted Find Emaployee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"switch (responseCode.code) {\r",
											"    case 200:\r",
											"        tests[\"200 ok. The request has succeeded\"] = true;\r",
											"        break;\r",
											"    case 404:\r",
											"        tests[\"404 Not found\"] = false;\r",
											"        break;\r",
											"    case 400:\r",
											"        tests[\"400 Bad Request\"] = false;\r",
											"        break;\r",
											"    case 401:\r",
											"        tests[\"401 BUnauthorized\"] = false;\r",
											"        break;\r",
											"    case 500:\r",
											"        tests[\"500 Internal Server Error\"] = false;\r",
											"        break;\r",
											"    case 503:\r",
											"        tests[\"503 Server unavailable\"] = false;\r",
											"        break;\r",
											"    case 502:\r",
											"        tests[\"502 bad gateway\"] = false;\r",
											"        break;\r",
											"    case 599:\r",
											"        tests[\"599 Network connect timeout error\"] = false;\r",
											"        break;\r",
											"    case 408:\r",
											"        tests[\"408 Request is timeout\"] = false;\r",
											"        break;\r",
											"    default:\r",
											"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
											"}\r",
											"\r",
											"// simple version of the top code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// another version of the top code \r",
											"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
											"\r",
											"// checking time response\r",
											"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
											"\r",
											"\r",
											"// Making sure our test will not create any errors\r",
											"pm.test(\"Response should be ok to process\", function () {\r",
											"   pm.response.to.not.be.error;\r",
											"   pm.response.to.be.withBody;\r",
											"   pm.response.to.be.json;\r",
											"   pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// checking that header actually consists all necessary lines\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// // Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body \r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\");\r",
											"// })\r",
											"\r",
											"\r",
											"// Delete request properly executed and as confirmation proper MessageId returned. \"\" To convert int in environment to string in the body\r",
											"// pm.test(\"Deletion messageId is correct\", function (){\r",
											"//     pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
											"// })\r",
											"\r",
											"// checking that requested order was found sucessfully and properlly executed without any errors\r",
											"// pm.test(\"Requested adress is found and properly executed\", function(){\r",
											"//     pm.expect(jsonData.code).to.not.eql(404);\r",
											"//     pm.expect(jsonData.code).to.not.eql(400);\r",
											"//     pm.expect(jsonData.code).to.not.eql(500);\r",
											"//     pm.expect(jsonData.message).to.not.eql(\"Address Not Found\");\r",
											"// })\r",
											"\r",
											"// body response not one of the codes \r",
											"pm.test(\"Response code not one of\", function () {\r",
											"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ibench.net/api/users/search",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Deletetd Find Employee search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(responseCode.code === 200) {\r",
											"    tests[\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests[\"Bad request, 400 OK\"] = true;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests[\"Forbiden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 422) {\r",
											"    tests[\"he instance is not valid\"] = false;\r",
											"} else {\r",
											"    tests[\"Something went wrong. Check response body\"] = false;\r",
											"};\r",
											"\r",
											"pm.test(\"Server response is correct as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains correct environment data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Search not found or do not belong to you\");\r",
											"});\r",
											"\r",
											"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
											"\r",
											"pm.test(\"Response Size is less than 900B\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body should be in the correct format\", function() {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a('string'); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "{{AUT}}"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "host",
										"value": "ibench.net"
									}
								],
								"url": {
									"raw": "{{URL}}results?search_id={{SEARCH_ID}}",
									"host": [
										"{{URL}}results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "{{SEARCH_ID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Boundary testing for Find employee",
			"item": [
				{
					"name": "Create 0 as value for HRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean environment\r",
									"pm.environment.clear();\r",
									"\r",
									"// set AUTHORISATION KEY FOR THE COLLECTION \r",
									"pm.environment.set(\"AUTH\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
									"\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"// Set ENV URL\r",
									"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
									"\r",
									"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
									"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
									"\r",
									"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
									"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
									"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set('COUNTRY', loc);\r",
									"\r",
									"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
									"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
									"\r",
									"// // Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
									"// pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
									"\r",
									"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
									"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
									"\r",
									"// Lets set SKILL_ID_0 random value\r",
									"let skillId = Math.floor(Math.random() * 239) + 1;\r",
									"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
									"\r",
									"// Lets set SKILL_ID_1 random value\r",
									"var skillId1 = (skillId + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
									"\r",
									"// Lets set SKILL_ID_2 random value\r",
									"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
									"\r",
									"// Lets set SKILL_ID_3 random value\r",
									"var skillId3= (skillId3 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
									"\r",
									"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
									"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"pm.environment.set('DESCR', description);\r",
									"\r",
									"// // Set random skill from the list\r",
									"// const skillName =[\r",
									"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
									"// ];\r",
									"// // add skill name 0\r",
									"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
									"// add skill name 1\r",
									"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
									"// // add skill name 1\r",
									"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
									"// // add skill name 1\r",
									"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
									"\r",
									"\r",
									"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
									"\r",
									"// const fs = require('fs');\r",
									"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
									"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
									"// pm.environment.set('AUT', authorizationKey);\r",
									"\r",
									"// // Set the URL of the cloud text file\r",
									"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
									"\r",
									"\r",
									"\r",
									"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"// pm.environment.set('FN', fName);\r",
									"\r",
									"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"// pm.environment.set('LN', lName);\r",
									"\r",
									"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP', comp);\r",
									"\r",
									"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1', add1);\r",
									"\r",
									"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY', city);\r",
									"\r",
									"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"// pm.environment.set('CNTR', country);\r",
									"\r",
									"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"// pm.environment.set('PHN', phn);\r",
									"\r",
									"// // adding ENV Updated values \r",
									"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP_UPD', compUP);\r",
									"\r",
									"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1_UPD', add1UP);\r",
									"\r",
									"// // return a random iteger from 100 to 900 with 3 digits\r",
									"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY_UPD', cityUP);\r",
									"\r",
									"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
									"\r",
									"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
									"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
									"\r",
									"// console.log(pm.environment.get(\"ZIP\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 502 OK'] = responseCode.code === 502;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Length\", \"584\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// Parse JSON response body, Extract search_id value, Set environment variable\r",
									"const responseB = pm.response.json();\r",
									"const searchId = responseB.search.search_id;\r",
									"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// Parse JSON response body, Extract company_id value, Set environment variable\r",
									"const companyId = responseB.search.company_id;\r",
									"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "description",
									"value": "{{DESCR}}"
								},
								{
									"key": "english_level_id",
									"value": "{{ENG_LVL}}"
								},
								{
									"key": "experience",
									"value": "{{EXP}}"
								},
								{
									"key": "job_title_id",
									"value": "{{JOB_ID}}"
								},
								{
									"key": "location",
									"value": "{{COUNTRY}}"
								},
								{
									"key": "position_level_id",
									"value": "{{POS_LVL}}"
								},
								{
									"key": "rate_to",
									"value": "0"
								},
								{
									"key": "skills[0][skill_id]",
									"value": "{{SKILL_ID_0}}"
								},
								{
									"key": "skills[0][skill_name]",
									"value": ""
								},
								{
									"key": "skills[1][skill_id]",
									"value": "{{SKILL_ID_1}}",
									"type": "text"
								},
								{
									"key": "skills[1][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[2][skill_id]",
									"value": "{{SKILL_ID_2}}",
									"type": "text"
								},
								{
									"key": "skills[2][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[3][skill_id]",
									"value": "{{SKILL_ID_3}}",
									"type": "text"
								},
								{
									"key": "skills[3][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_id]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "vetted",
									"value": "{{VET}}"
								}
							]
						},
						"url": {
							"raw": "{{URL}}?AUT={{AUTH}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "AUT",
									"value": "{{AUTH}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has the key\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
									"// const responseB = pm.response.json();\r",
									"// const searchId = responseB.search.search_id;\r",
									"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
									"// const companyId = responseB.search.company_id;\r",
									"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "_gcl_au=1.1.696928211.1681385002; _fbp=fb.1.1681385002318.852464875; _hjSessionUser_1503512=eyJpZCI6IjRkODdiOGRjLTdlN2MtNWVlZi1iNmE2LWZlN2FmMGQzZTA4YiIsImNyZWF0ZWQiOjE2ODEzODUwMDI0ODQsImV4aXN0aW5nIjp0cnVlfQ==; we-love-cookies=1; __stripe_mid=ff3e8837-9be0-45ec-b74b-7026f2704eeada7d9e; ln_or=eyIzMzQ5NjgyIjoiZCJ9; SL_G_WPT_TO=en; _gid=GA1.2.1955049777.1684342958; _hjSession_1503512=eyJpZCI6IjJkNjcxNTFkLTVkOTgtNDRiZS1iMDg4LWEyZWVkNzI1NjdlZiIsImNyZWF0ZWQiOjE2ODQzNDI5NTc4MDEsImluU2FtcGxlIjp0cnVlfQ==; _hjAbsoluteSessionInProgress=0; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _hjIncludedInSessionSample_1503512=1; _ga_EZQXQ00MNV=GS1.1.1684342957.6.1.1684343949.0.0.0; _ga=GA1.1.491442719.1681385002; _ga_VZNKF74S72=GS1.1.1684342957.41.1.1684343949.0.0.0"
							},
							{
								"key": "Origin",
								"value": "https://ibench.net"
							},
							{
								"key": "Referer",
								"value": "https://ibench.net/add-search"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "skill_id",
									"value": "{{SKILL_ID_0}}",
									"type": "text"
								},
								{
									"key": "skill_name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}skills",
							"host": [
								"{{URL}}skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for vaue 0 is accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 ERROR - Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 ERROR - Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 ERROR - bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
									"};\r",
									"\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"New ID is in response\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
									"};\r",
									"\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if response body is in json format\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Check first and last name ENV match\r",
									"pm.test(\"Check search_id and company_id mach with ENV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id.toString()).to.eql(pm.environment.get(\"SEARCH_ID\"));\r",
									"    pm.expect(jsonData.searches[0].company_id.toString()).to.eql(pm.environment.get(\"COMPANY_ID\"));\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_0\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_1\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[0].skill_name.toString()).to.eql(pm.environment.get(\"SKILL_NAME_0\"));\r",
									"\r",
									"});\r",
									"\r",
									";\r",
									"// // Check if id is in UUIDs format\r",
									"// pm.test(\"Verify format of id\", function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
									"// });\r",
									"\r",
									"// checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"});\r",
									"\r",
									"// expect that HRATE value will be returned as 1 number\r",
									"pm.test('Body consists of HRate equal to 0', function () {\r",
									"    var rateTo = parseInt(pm.response.json().searches[0].rate_to);\r",
									"    pm.expect(rateTo).to.equal(0);\r",
									"});\r",
									"\r",
									"// Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "ibench.net"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"url": {
							"raw": "{{URL}}?search_id={{SEARCH_ID}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}"
								},
								{
									"key": "is_single_developer",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "https://ibench.net/api/users/search/results?search_id=1078",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODIxNjU1NjF9.nNWRPBToh6fanuglSahhcfaF3wthzqNoc0R_DJCtQX0"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "https://ibench.net/api/users/search/results?search_id=1078",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search",
										"results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "1078"
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Create 1 as value for HRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean environment\r",
									"pm.environment.clear();\r",
									"\r",
									"// set AUTHORISATION KEY FOR THE COLLECTION \r",
									"pm.environment.set(\"AUTH\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
									"\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"// Set ENV URL\r",
									"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
									"\r",
									"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
									"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
									"\r",
									"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
									"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
									"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set('COUNTRY', loc);\r",
									"\r",
									"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
									"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
									"\r",
									"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
									"// pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
									"\r",
									"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
									"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
									"\r",
									"// Lets set SKILL_ID_0 random value\r",
									"let skillId = Math.floor(Math.random() * 239) + 1;\r",
									"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
									"\r",
									"// Lets set SKILL_ID_1 random value\r",
									"var skillId1 = (skillId + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
									"\r",
									"// Lets set SKILL_ID_2 random value\r",
									"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
									"\r",
									"// Lets set SKILL_ID_3 random value\r",
									"var skillId3= (skillId3 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
									"\r",
									"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
									"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"pm.environment.set('DESCR', description);\r",
									"\r",
									"// // Set random skill from the list\r",
									"// const skillName =[\r",
									"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
									"// ];\r",
									"// // add skill name 0\r",
									"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
									"// add skill name 1\r",
									"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
									"// // add skill name 1\r",
									"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
									"// // add skill name 1\r",
									"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
									"\r",
									"\r",
									"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
									"\r",
									"// const fs = require('fs');\r",
									"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
									"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
									"// pm.environment.set('AUT', authorizationKey);\r",
									"\r",
									"// // Set the URL of the cloud text file\r",
									"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
									"\r",
									"\r",
									"\r",
									"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"// pm.environment.set('FN', fName);\r",
									"\r",
									"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"// pm.environment.set('LN', lName);\r",
									"\r",
									"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP', comp);\r",
									"\r",
									"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1', add1);\r",
									"\r",
									"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY', city);\r",
									"\r",
									"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"// pm.environment.set('CNTR', country);\r",
									"\r",
									"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"// pm.environment.set('PHN', phn);\r",
									"\r",
									"// // adding ENV Updated values \r",
									"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP_UPD', compUP);\r",
									"\r",
									"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1_UPD', add1UP);\r",
									"\r",
									"// // return a random iteger from 100 to 900 with 3 digits\r",
									"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY_UPD', cityUP);\r",
									"\r",
									"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
									"\r",
									"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
									"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
									"\r",
									"// console.log(pm.environment.get(\"ZIP\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has all keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// expect that HRATE value will be returned as 1 number\r",
									"pm.test('Body consists of HRate equal to 1', function () {\r",
									"    var rateTo = parseInt(pm.response.json().search.rate_to);\r",
									"    pm.expect(rateTo).to.equal(1);\r",
									"});\r",
									"\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.search.search_id).to.be.a('number');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// Parse JSON response body, Extract search_id value, Set environment variable\r",
									"const responseB = pm.response.json();\r",
									"const searchId = responseB.search.search_id;\r",
									"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// Parse JSON response body, Extract company_id value, Set environment variable\r",
									"const companyId = responseB.search.company_id;\r",
									"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "description",
									"value": "{{DESCR}}"
								},
								{
									"key": "english_level_id",
									"value": "{{ENG_LVL}}"
								},
								{
									"key": "experience",
									"value": "{{EXP}}"
								},
								{
									"key": "job_title_id",
									"value": "{{JOB_ID}}"
								},
								{
									"key": "location",
									"value": "{{COUNTRY}}"
								},
								{
									"key": "position_level_id",
									"value": "{{POS_LVL}}"
								},
								{
									"key": "rate_to",
									"value": "1"
								},
								{
									"key": "skills[0][skill_id]",
									"value": "{{SKILL_ID_0}}"
								},
								{
									"key": "skills[0][skill_name]",
									"value": ""
								},
								{
									"key": "skills[1][skill_id]",
									"value": "{{SKILL_ID_1}}",
									"type": "text"
								},
								{
									"key": "skills[1][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[2][skill_id]",
									"value": "{{SKILL_ID_2}}",
									"type": "text"
								},
								{
									"key": "skills[2][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[3][skill_id]",
									"value": "{{SKILL_ID_3}}",
									"type": "text"
								},
								{
									"key": "skills[3][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_id]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "vetted",
									"value": "{{VET}}"
								}
							]
						},
						"url": {
							"raw": "{{URL}}?AUT={{AUTH}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "AUT",
									"value": "{{AUTH}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has the key\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
									"// const responseB = pm.response.json();\r",
									"// const searchId = responseB.search.search_id;\r",
									"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
									"// const companyId = responseB.search.company_id;\r",
									"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "_gcl_au=1.1.696928211.1681385002; _fbp=fb.1.1681385002318.852464875; _hjSessionUser_1503512=eyJpZCI6IjRkODdiOGRjLTdlN2MtNWVlZi1iNmE2LWZlN2FmMGQzZTA4YiIsImNyZWF0ZWQiOjE2ODEzODUwMDI0ODQsImV4aXN0aW5nIjp0cnVlfQ==; we-love-cookies=1; __stripe_mid=ff3e8837-9be0-45ec-b74b-7026f2704eeada7d9e; ln_or=eyIzMzQ5NjgyIjoiZCJ9; SL_G_WPT_TO=en; _gid=GA1.2.1955049777.1684342958; _hjSession_1503512=eyJpZCI6IjJkNjcxNTFkLTVkOTgtNDRiZS1iMDg4LWEyZWVkNzI1NjdlZiIsImNyZWF0ZWQiOjE2ODQzNDI5NTc4MDEsImluU2FtcGxlIjp0cnVlfQ==; _hjAbsoluteSessionInProgress=0; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _hjIncludedInSessionSample_1503512=1; _ga_EZQXQ00MNV=GS1.1.1684342957.6.1.1684343949.0.0.0; _ga=GA1.1.491442719.1681385002; _ga_VZNKF74S72=GS1.1.1684342957.41.1.1684343949.0.0.0"
							},
							{
								"key": "Origin",
								"value": "https://ibench.net"
							},
							{
								"key": "Referer",
								"value": "https://ibench.net/add-search"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "skill_id",
									"value": "{{SKILL_ID_0}}",
									"type": "text"
								},
								{
									"key": "skill_name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}skills",
							"host": [
								"{{URL}}skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for vaue 1 is accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 ERROR - Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 ERROR - Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 ERROR - bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
									"};\r",
									"\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// expect that HRATE value will be returned as 1 number\r",
									"pm.test('Body consists of HRate equal to 1', function () {\r",
									"    var rateTo = parseInt(pm.response.json().searches[0].rate_to);\r",
									"    pm.expect(rateTo).to.equal(1);\r",
									"});\r",
									"\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"New ID is in response\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
									"};\r",
									"\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if response body is in json format\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Check first and last name ENV match\r",
									"pm.test(\"Check search_id and company_id mach with ENV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id.toString()).to.eql(pm.environment.get(\"SEARCH_ID\"));\r",
									"    pm.expect(jsonData.searches[0].company_id.toString()).to.eql(pm.environment.get(\"COMPANY_ID\"));\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_0\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_1\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[0].skill_name.toString()).to.eql(pm.environment.get(\"SKILL_NAME_0\"));\r",
									"\r",
									"});\r",
									"\r",
									";\r",
									"// // Check if id is in UUIDs format\r",
									"// pm.test(\"Verify format of id\", function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
									"// });\r",
									"\r",
									"// checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"});\r",
									"\r",
									"\r",
									"// Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "ibench.net"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"url": {
							"raw": "{{URL}}?search_id={{SEARCH_ID}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}"
								},
								{
									"key": "is_single_developer",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "https://ibench.net/api/users/search/results?search_id=1078",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODIxNjU1NjF9.nNWRPBToh6fanuglSahhcfaF3wthzqNoc0R_DJCtQX0"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "https://ibench.net/api/users/search/results?search_id=1078",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search",
										"results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "1078"
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Create Random value for HRate from 1 to 65535",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean environment\r",
									"pm.environment.clear();\r",
									"\r",
									"// set AUTHORISATION KEY FOR THE COLLECTION \r",
									"pm.environment.set(\"AUTH\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
									"\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"// Set ENV URL\r",
									"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
									"\r",
									"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
									"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
									"\r",
									"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
									"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
									"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set('COUNTRY', loc);\r",
									"\r",
									"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
									"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
									"\r",
									"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
									"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
									"\r",
									"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
									"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
									"\r",
									"// Lets set SKILL_ID_0 random value\r",
									"let skillId = Math.floor(Math.random() * 239) + 1;\r",
									"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
									"\r",
									"// Lets set SKILL_ID_1 random value\r",
									"var skillId1 = (skillId + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
									"\r",
									"// Lets set SKILL_ID_2 random value\r",
									"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
									"\r",
									"// Lets set SKILL_ID_3 random value\r",
									"var skillId3= (skillId3 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
									"\r",
									"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
									"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"pm.environment.set('DESCR', description);\r",
									"\r",
									"// // Set random skill from the list\r",
									"// const skillName =[\r",
									"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
									"// ];\r",
									"// // add skill name 0\r",
									"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
									"// add skill name 1\r",
									"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
									"// // add skill name 1\r",
									"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
									"// // add skill name 1\r",
									"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
									"\r",
									"\r",
									"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
									"\r",
									"// const fs = require('fs');\r",
									"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
									"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
									"// pm.environment.set('AUT', authorizationKey);\r",
									"\r",
									"// // Set the URL of the cloud text file\r",
									"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
									"\r",
									"\r",
									"\r",
									"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"// pm.environment.set('FN', fName);\r",
									"\r",
									"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"// pm.environment.set('LN', lName);\r",
									"\r",
									"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP', comp);\r",
									"\r",
									"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1', add1);\r",
									"\r",
									"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY', city);\r",
									"\r",
									"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"// pm.environment.set('CNTR', country);\r",
									"\r",
									"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"// pm.environment.set('PHN', phn);\r",
									"\r",
									"// // adding ENV Updated values \r",
									"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP_UPD', compUP);\r",
									"\r",
									"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1_UPD', add1UP);\r",
									"\r",
									"// // return a random iteger from 100 to 900 with 3 digits\r",
									"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY_UPD', cityUP);\r",
									"\r",
									"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
									"\r",
									"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
									"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
									"\r",
									"// console.log(pm.environment.get(\"ZIP\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has all keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.search.search_id).to.be.a('number');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// Parse JSON response body, Extract search_id value, Set environment variable\r",
									"const responseB = pm.response.json();\r",
									"const searchId = responseB.search.search_id;\r",
									"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// Parse JSON response body, Extract company_id value, Set environment variable\r",
									"const companyId = responseB.search.company_id;\r",
									"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "description",
									"value": "{{DESCR}}"
								},
								{
									"key": "english_level_id",
									"value": "{{ENG_LVL}}"
								},
								{
									"key": "experience",
									"value": "{{EXP}}"
								},
								{
									"key": "job_title_id",
									"value": "{{JOB_ID}}"
								},
								{
									"key": "location",
									"value": "{{COUNTRY}}"
								},
								{
									"key": "position_level_id",
									"value": "{{POS_LVL}}"
								},
								{
									"key": "rate_to",
									"value": "{{HRATE}}"
								},
								{
									"key": "skills[0][skill_id]",
									"value": "{{SKILL_ID_0}}"
								},
								{
									"key": "skills[0][skill_name]",
									"value": ""
								},
								{
									"key": "skills[1][skill_id]",
									"value": "{{SKILL_ID_1}}",
									"type": "text"
								},
								{
									"key": "skills[1][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[2][skill_id]",
									"value": "{{SKILL_ID_2}}",
									"type": "text"
								},
								{
									"key": "skills[2][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[3][skill_id]",
									"value": "{{SKILL_ID_3}}",
									"type": "text"
								},
								{
									"key": "skills[3][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_id]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "vetted",
									"value": "{{VET}}"
								}
							]
						},
						"url": {
							"raw": "{{URL}}?AUT={{AUTH}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "AUT",
									"value": "{{AUTH}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has the key\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
									"// const responseB = pm.response.json();\r",
									"// const searchId = responseB.search.search_id;\r",
									"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
									"// const companyId = responseB.search.company_id;\r",
									"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "_gcl_au=1.1.696928211.1681385002; _fbp=fb.1.1681385002318.852464875; _hjSessionUser_1503512=eyJpZCI6IjRkODdiOGRjLTdlN2MtNWVlZi1iNmE2LWZlN2FmMGQzZTA4YiIsImNyZWF0ZWQiOjE2ODEzODUwMDI0ODQsImV4aXN0aW5nIjp0cnVlfQ==; we-love-cookies=1; __stripe_mid=ff3e8837-9be0-45ec-b74b-7026f2704eeada7d9e; ln_or=eyIzMzQ5NjgyIjoiZCJ9; SL_G_WPT_TO=en; _gid=GA1.2.1955049777.1684342958; _hjSession_1503512=eyJpZCI6IjJkNjcxNTFkLTVkOTgtNDRiZS1iMDg4LWEyZWVkNzI1NjdlZiIsImNyZWF0ZWQiOjE2ODQzNDI5NTc4MDEsImluU2FtcGxlIjp0cnVlfQ==; _hjAbsoluteSessionInProgress=0; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _hjIncludedInSessionSample_1503512=1; _ga_EZQXQ00MNV=GS1.1.1684342957.6.1.1684343949.0.0.0; _ga=GA1.1.491442719.1681385002; _ga_VZNKF74S72=GS1.1.1684342957.41.1.1684343949.0.0.0"
							},
							{
								"key": "Origin",
								"value": "https://ibench.net"
							},
							{
								"key": "Referer",
								"value": "https://ibench.net/add-search"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "skill_id",
									"value": "{{SKILL_ID_0}}",
									"type": "text"
								},
								{
									"key": "skill_name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}skills",
							"host": [
								"{{URL}}skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for random vaue is accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 ERROR - Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 ERROR - Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 ERROR - bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
									"};\r",
									"\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"New ID is in response\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
									"};\r",
									"\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if response body is in json format\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Check first and last name ENV match\r",
									"pm.test(\"Check search_id and company_id mach with ENV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id.toString()).to.eql(pm.environment.get(\"SEARCH_ID\"));\r",
									"    pm.expect(jsonData.searches[0].company_id.toString()).to.eql(pm.environment.get(\"COMPANY_ID\"));\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_0\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_1\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[0].skill_name.toString()).to.eql(pm.environment.get(\"SKILL_NAME_0\"));\r",
									"\r",
									"});\r",
									"\r",
									";\r",
									"// // Check if id is in UUIDs format\r",
									"// pm.test(\"Verify format of id\", function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
									"// });\r",
									"\r",
									"// checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"});\r",
									"\r",
									"\r",
									"// Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "ibench.net"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"url": {
							"raw": "{{URL}}?search_id={{SEARCH_ID}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}"
								},
								{
									"key": "is_single_developer",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "https://ibench.net/api/users/search/results?search_id=1078",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODIxNjU1NjF9.nNWRPBToh6fanuglSahhcfaF3wthzqNoc0R_DJCtQX0"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "https://ibench.net/api/users/search/results?search_id=1078",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search",
										"results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "1078"
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Create 65535 VALUE IS ACCEPTED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean environment\r",
									"pm.environment.clear();\r",
									"\r",
									"// set AUTHORISATION KEY FOR THE COLLECTION \r",
									"pm.environment.set(\"AUTH\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
									"\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"// Set ENV URL\r",
									"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
									"\r",
									"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
									"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
									"\r",
									"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
									"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
									"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set('COUNTRY', loc);\r",
									"\r",
									"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
									"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
									"\r",
									"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
									"// pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
									"\r",
									"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
									"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
									"\r",
									"// Lets set SKILL_ID_0 random value\r",
									"let skillId = Math.floor(Math.random() * 239) + 1;\r",
									"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
									"\r",
									"// Lets set SKILL_ID_1 random value\r",
									"var skillId1 = (skillId + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
									"\r",
									"// Lets set SKILL_ID_2 random value\r",
									"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
									"\r",
									"// Lets set SKILL_ID_3 random value\r",
									"var skillId3= (skillId3 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
									"\r",
									"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
									"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"pm.environment.set('DESCR', description);\r",
									"\r",
									"// // Set random skill from the list\r",
									"// const skillName =[\r",
									"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
									"// ];\r",
									"// // add skill name 0\r",
									"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
									"// add skill name 1\r",
									"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
									"// // add skill name 1\r",
									"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
									"// // add skill name 1\r",
									"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
									"\r",
									"\r",
									"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
									"\r",
									"// const fs = require('fs');\r",
									"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
									"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
									"// pm.environment.set('AUT', authorizationKey);\r",
									"\r",
									"// // Set the URL of the cloud text file\r",
									"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
									"\r",
									"\r",
									"\r",
									"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"// pm.environment.set('FN', fName);\r",
									"\r",
									"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"// pm.environment.set('LN', lName);\r",
									"\r",
									"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP', comp);\r",
									"\r",
									"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1', add1);\r",
									"\r",
									"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY', city);\r",
									"\r",
									"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"// pm.environment.set('CNTR', country);\r",
									"\r",
									"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"// pm.environment.set('PHN', phn);\r",
									"\r",
									"// // adding ENV Updated values \r",
									"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP_UPD', compUP);\r",
									"\r",
									"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1_UPD', add1UP);\r",
									"\r",
									"// // return a random iteger from 100 to 900 with 3 digits\r",
									"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY_UPD', cityUP);\r",
									"\r",
									"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
									"\r",
									"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
									"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
									"\r",
									"// console.log(pm.environment.get(\"ZIP\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// expect that HRATE value will be returned as 65535 number\r",
									"pm.test('Body consists of HRate equal to 65535', function () {\r",
									"    var rateTo = parseInt(pm.response.json().search.rate_to);\r",
									"    pm.expect(rateTo).to.equal(65535);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has all keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.search.search_id).to.be.a('number');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// Parse JSON response body, Extract search_id value, Set environment variable\r",
									"const responseB = pm.response.json();\r",
									"const searchId = responseB.search.search_id;\r",
									"pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// Parse JSON response body, Extract company_id value, Set environment variable\r",
									"const companyId = responseB.search.company_id;\r",
									"pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "description",
									"value": "{{DESCR}}"
								},
								{
									"key": "english_level_id",
									"value": "{{ENG_LVL}}"
								},
								{
									"key": "experience",
									"value": "{{EXP}}"
								},
								{
									"key": "job_title_id",
									"value": "{{JOB_ID}}"
								},
								{
									"key": "location",
									"value": "{{COUNTRY}}"
								},
								{
									"key": "position_level_id",
									"value": "{{POS_LVL}}"
								},
								{
									"key": "rate_to",
									"value": "65535"
								},
								{
									"key": "skills[0][skill_id]",
									"value": "{{SKILL_ID_0}}"
								},
								{
									"key": "skills[0][skill_name]",
									"value": ""
								},
								{
									"key": "skills[1][skill_id]",
									"value": "{{SKILL_ID_1}}",
									"type": "text"
								},
								{
									"key": "skills[1][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[2][skill_id]",
									"value": "{{SKILL_ID_2}}",
									"type": "text"
								},
								{
									"key": "skills[2][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[3][skill_id]",
									"value": "{{SKILL_ID_3}}",
									"type": "text"
								},
								{
									"key": "skills[3][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_id]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "vetted",
									"value": "{{VET}}"
								}
							]
						},
						"url": {
							"raw": "{{URL}}?AUT={{AUTH}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "AUT",
									"value": "{{AUTH}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"Body response has the key\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", \"Skill added to search.\");    \r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"   pm.response.to.not.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.message).to.be.a('string');    \r",
									" });\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"// // Parse JSON response body, Extract search_id value, Set environment variable\r",
									"// const responseB = pm.response.json();\r",
									"// const searchId = responseB.search.search_id;\r",
									"// pm.environment.set(\"SEARCH_ID\", searchId.toString());\r",
									"\r",
									"// // Parse JSON response body, Extract company_id value, Set environment variable\r",
									"// const companyId = responseB.search.company_id;\r",
									"// pm.environment.set(\"COMPANY_ID\", companyId.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "_gcl_au=1.1.696928211.1681385002; _fbp=fb.1.1681385002318.852464875; _hjSessionUser_1503512=eyJpZCI6IjRkODdiOGRjLTdlN2MtNWVlZi1iNmE2LWZlN2FmMGQzZTA4YiIsImNyZWF0ZWQiOjE2ODEzODUwMDI0ODQsImV4aXN0aW5nIjp0cnVlfQ==; we-love-cookies=1; __stripe_mid=ff3e8837-9be0-45ec-b74b-7026f2704eeada7d9e; ln_or=eyIzMzQ5NjgyIjoiZCJ9; SL_G_WPT_TO=en; _gid=GA1.2.1955049777.1684342958; _hjSession_1503512=eyJpZCI6IjJkNjcxNTFkLTVkOTgtNDRiZS1iMDg4LWEyZWVkNzI1NjdlZiIsImNyZWF0ZWQiOjE2ODQzNDI5NTc4MDEsImluU2FtcGxlIjp0cnVlfQ==; _hjAbsoluteSessionInProgress=0; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _hjIncludedInSessionSample_1503512=1; _ga_EZQXQ00MNV=GS1.1.1684342957.6.1.1684343949.0.0.0; _ga=GA1.1.491442719.1681385002; _ga_VZNKF74S72=GS1.1.1684342957.41.1.1684343949.0.0.0"
							},
							{
								"key": "Origin",
								"value": "https://ibench.net"
							},
							{
								"key": "Referer",
								"value": "https://ibench.net/add-search"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "skill_id",
									"value": "{{SKILL_ID_0}}",
									"type": "text"
								},
								{
									"key": "skill_name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}skills",
							"host": [
								"{{URL}}skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for 65535 value is accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 is ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 ERROR - Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 ERROR - Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 ERROR - bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
									"};\r",
									"\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// expect that HRATE value will be returned as 65535 number\r",
									"pm.test('Body consists of HRate equal to 65535', function () {\r",
									"    var rateTo = parseInt(pm.response.json().searches[0].rate_to);\r",
									"    pm.expect(rateTo).to.equal(65535);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"New ID is in response\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
									"};\r",
									"\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if response body is in json format\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Check first and last name ENV match\r",
									"pm.test(\"Check search_id and company_id mach with ENV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id.toString()).to.eql(pm.environment.get(\"SEARCH_ID\"));\r",
									"    pm.expect(jsonData.searches[0].company_id.toString()).to.eql(pm.environment.get(\"COMPANY_ID\"));\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_0\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_1\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[0].skill_name.toString()).to.eql(pm.environment.get(\"SKILL_NAME_0\"));\r",
									"\r",
									"});\r",
									"\r",
									";\r",
									"// // Check if id is in UUIDs format\r",
									"// pm.test(\"Verify format of id\", function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
									"// });\r",
									"\r",
									"// checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    // pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"});\r",
									"\r",
									"\r",
									"// Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "ibench.net"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"url": {
							"raw": "{{URL}}?search_id={{SEARCH_ID}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}"
								},
								{
									"key": "is_single_developer",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "https://ibench.net/api/users/search/results?search_id=1078",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODIxNjU1NjF9.nNWRPBToh6fanuglSahhcfaF3wthzqNoc0R_DJCtQX0"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "https://ibench.net/api/users/search/results?search_id=1078",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search",
										"results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "1078"
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Create 65536 VALUE IS ACCEPTED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean environment\r",
									"pm.environment.clear();\r",
									"\r",
									"// set AUTHORISATION KEY FOR THE COLLECTION \r",
									"pm.environment.set(\"AUTH\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjE1OSwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA1LTAxVDIxOjM4OjA3LjAwMFoiLCJleHAiOjE2ODUyMTc0NTJ9.WVpSb5PT8gI7IdX5C37V6OpN_RugxLb4Hl5FCcFNBr8\");\r",
									"\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"// Set ENV URL\r",
									"pm.environment.set(\"URL\", \"https://ibench.net/api/users/search/\")\r",
									"\r",
									"// Set random ENV English Level that asigned to certain value. Value from 1 to 7\r",
									"pm.environment.set(\"ENG_LVL\", Math.floor(Math.random() * 7) + 1); \r",
									"\r",
									"// Set random ENV Experience that asigned to certain value. Value from 1 to 10\r",
									"pm.environment.set(\"EXP\", Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Set random ENV Job ID that asigned to certain value. Value from 1 to 22\r",
									"pm.environment.set(\"JOB_ID\", Math.floor(Math.random() * 22) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let loc = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set('COUNTRY', loc);\r",
									"\r",
									"// Set random ENV Position level id that asigned to certain value. Value from 1 to 4\r",
									"pm.environment.set(\"POS_LVL\", Math.floor(Math.random() * 4) + 1);\r",
									"\r",
									"// Set random ENV MAximum Hourly Rate. Value from 1 to 65535\r",
									"pm.environment.set(\"HRATE\", Math.floor(Math.random() * 65535) + 1);\r",
									"\r",
									"// Set random ENV Only Verifyed companies or ALL companies. Value 0 or 1\r",
									"pm.environment.set(\"VET\", Math.floor(Math.random() * 2));\r",
									"\r",
									"// Lets set SKILL_ID_0 random value\r",
									"let skillId = Math.floor(Math.random() * 239) + 1;\r",
									"pm.environment.set(\"SKILL_ID_0\", skillId);\r",
									"\r",
									"// Lets set SKILL_ID_1 random value\r",
									"var skillId1 = (skillId + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_1\", skillId1); \r",
									"\r",
									"// Lets set SKILL_ID_2 random value\r",
									"var skillId2 = (skillId1 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_2\", skillId2);\r",
									"\r",
									"// Lets set SKILL_ID_3 random value\r",
									"var skillId3= (skillId3 + 43) % 239 + 1;\r",
									"pm.environment.set(\"SKILL_ID_3\", skillId3);\r",
									"\r",
									"// pm.environment.set(\"SKILL_ID_2\", Math.floor(Math.random() * 239) + 1);\r",
									"// pm.environment.set(\"SKILL_ID_3\", Math.floor(Math.random() * 239) + 1);\r",
									"\r",
									"// Set ENV location as random Country from Random library\r",
									"let description = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"pm.environment.set('DESCR', description);\r",
									"\r",
									"// // Set random skill from the list\r",
									"// const skillName =[\r",
									"//   '.NET', '.NET Core', 'ActionScript', 'Adobe Illustrator', 'Adobe InDesign', 'Adobe XD', 'Agile', 'AI', 'Alamofire', 'Analitics', 'Android', 'Android SDK', 'Angular', 'Angular Material', 'AngularJS', 'Ansible', 'Apache Kafka', 'Apache Spark', 'AppAuth', 'AR', 'Architecture', 'Architecture MVC', 'Architecture MVP', 'ASP.NET', 'ASP.NET Core', 'Automation', 'Balsamig', 'Bubble', 'C', 'Aurelia', 'AWS', 'Axure RP', 'Backbone.js', 'Bash', 'Big Data', 'Blockchain', 'C#', 'C++', 'CakePHP', 'Chrome Extension', 'Clean Architecture', 'Cloiure', 'CloudKit', 'Cocoa', 'Codelgniter', 'CoffeeScript', 'Components', 'Confluence', 'Cordova', 'CoreData', 'Crashlytics', 'CS-Cart', 'CSS', 'CSS3', 'Curl', 'Cypress', 'DAO', 'Dart', 'Deep Learning', 'DevOps', 'Django', 'Docker', 'Drupal', 'Dynamic CRM', 'Elastic Search', 'Electron', 'Elixir', 'Ember.js', 'Erlang', 'ETL', 'Express.js', 'Extended Reality', 'F#', 'Facebook ADS', 'Figma', 'Firebase', 'Flask', 'Flat design', 'Flexbox', 'Flutter', 'Gatsbv.js', 'GCP', 'Git', 'Github', 'Gitlab ', 'Golang', 'Google ADS', ' Google Analytics', 'Google Material', 'Grails', 'GraphQL', 'Groovy ', 'Gulp ', 'Hadoop', 'Haskell', 'HotJar', 'HTML', 'HTML5', 'Hybrid App', 'Ionic',  'iOS', 'Java', 'Java DataBindingLibrary', 'JavaScript', 'Jenkins', 'Jest', 'JIRA', 'Joomla', 'jQuery', 'Kanban', 'Kingfisher', 'Kodein', 'Koin', 'Kotlin', 'Kubernetes', 'Laravel', 'Leads Generation', 'LESS', 'Linkedin ADS', 'Lisp', 'LMS', 'Magento', 'Maincraft', 'Marionette.js', 'Marvel', 'Material-UI', 'Materialize', 'MATLAB', 'Meteor', 'Mindmaps', 'Mixed Reality', 'ML', 'MobX', 'MongoDB', 'Moya', 'MS SQL', 'MySQL', 'NestJS', 'NFT', 'Nocode', 'Node.js', 'Nuxt', 'Objective-C', 'OCaml', 'OpenCart', 'OpenStack', 'osCommerce', 'Pandas', 'Perl', 'Phalcon', 'Phoenix', 'Photoshop', 'PHP', 'PHPfox', 'PinLayout', 'PL/SQL', 'PostCSS', 'PostgreSQL', 'PowerShell', 'Prototyping', 'PSD to HTML/CSS', 'PSD to WordPress', 'PyQt', 'Python', 'Python ML/AI', 'QA', 'Qt', 'R', 'RabbitMQ', 'Raspberry Pi', 'React Native', 'React.js', 'ReactorKit', 'Redis', 'Redmine', 'Redux', 'RequireJS', 'Responsive design', 'REST API', 'Retrofit', 'Retrofit 2', 'Roblox', 'Robotics', 'Room', 'Ruby', 'Ruby on Rails', 'Rust', 'rxAndroid', 'RxCocoa', 'rxJava', 'rxKotlin', 'rxRelay', 'RxSwift', 'Sails.js', 'Sales Funnels', 'Salesforce', 'SASS', 'Scala', 'SCRUM', 'SCSS', 'SDK Yandex MapKit', 'ServiceNow', 'Shell', 'Shopify', 'Shopware', 'Sketch', 'Smarty', 'SnapKit', 'Socket.IO', 'Solana', 'Solidity', 'Spring', 'SQL', 'SQLite', 'Stylus', 'Swift', 'SwiftGen', 'Symfony', 'T-SQL', 'TDD: XCTest', 'TensorFlow', 'Testing Manual', 'Tornado', 'Twig', 'Twitter Bootstrap', 'TypeScript', 'Unit Tests', 'Unity', 'Unity3D', 'Unreal', 'UX&UI', 'Vaadin', 'Vagrant', 'Virtual Reality', 'VR', 'Vue Bootstrap', 'Vue Material', 'Vue.js', 'Vuetify', 'Vuex', 'Webpack', 'WooCommerce', 'WordPress', 'Xamarin', 'xCode', 'XCTest', 'XML', 'Yii', 'Zend Framework', 'Zeplin', 'Zurb Foundation'\r",
									"// ];\r",
									"// // add skill name 0\r",
									"// const randomSkill = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_0\", randomSkill);\r",
									"// add skill name 1\r",
									"// const randomSkill2 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_1\", randomSkill2);\r",
									"// // add skill name 1\r",
									"// const randomSkill3 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_2\", randomSkill3);\r",
									"// // add skill name 1\r",
									"// const randomSkill4 = skillName[Math.floor(Math.random() * skillName.length)];\r",
									"// pm.environment.set(\"SKILL_NAME_3\", randomSkill4);\r",
									"\r",
									"\r",
									"// That is encreadible script that will give you possibility to add authorization from the outer file. \r",
									"\r",
									"// const fs = require('fs');\r",
									"// const filePath = 'C:/Users/alexa/OneDrive/Desktop/Authorisation_key.txt';\r",
									"// const authorizationKey = fs.readFileSync(filePath, 'utf8').trim();\r",
									"// pm.environment.set('AUT', authorizationKey);\r",
									"\r",
									"// // Set the URL of the cloud text file\r",
									"// const url = \"C:/Users/alexa/OneDrive/Desktop/Authorization_key.txt\";\r",
									"\r",
									"\r",
									"\r",
									"// let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"// pm.environment.set('FN', fName);\r",
									"\r",
									"// let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"// pm.environment.set('LN', lName);\r",
									"\r",
									"// let comp = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP', comp);\r",
									"\r",
									"// let add1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1', add1);\r",
									"\r",
									"// let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY', city);\r",
									"\r",
									"// let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"// pm.environment.set('CNTR', country);\r",
									"\r",
									"// let phn = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"// pm.environment.set('PHN', phn);\r",
									"\r",
									"// // adding ENV Updated values \r",
									"// let compUP = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"// pm.environment.set('CMP_UPD', compUP);\r",
									"\r",
									"// let add1UP = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"// pm.environment.set('ADR1_UPD', add1UP);\r",
									"\r",
									"// // return a random iteger from 100 to 900 with 3 digits\r",
									"// pm.environment.set(\"ADR2_UPD\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"// let cityUP = pm.variables.replaceIn('{{$randomCity}}')\r",
									"// pm.environment.set('CITY_UPD', cityUP);\r",
									"\r",
									"// const randomStateUP = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"// pm.environment.set(\"STATE_UPD\", randomStateUP);\r",
									"\r",
									"// // Set random ENV zipcode from 10000 to 90000 with 5 digits\r",
									"// pm.environment.set(\"ZIP_UPD\", Math.floor(Math.random() * 90000) + 10000 ); \r",
									"\r",
									"// console.log(pm.environment.get(\"ZIP\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// another version of the top code \r",
									"tests['Response code is 400 Bad Request'] = responseCode.code === 400;\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be with error\", function () {\r",
									"   pm.response.to.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"\r",
									" // checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body contains Error message\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"ER_WARN_DATA_OUT_OF_RANGE\");\r",
									"\r",
									"});\r",
									"// // Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									"\r",
									"// // Add id to the environment under SEARCH_ID\r",
									"// const responseJson = pm.response.json();\r",
									"\r",
									"// if(responseJson.hasOwnProperty(\"search_id\")) {\r",
									"//     const idValue = responseJson.search.search_id;\r",
									"//     pm.environment.set(\"SEARCH_ID\", idValue.toString());\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "description",
									"value": "{{DESCR}}"
								},
								{
									"key": "english_level_id",
									"value": "{{ENG_LVL}}"
								},
								{
									"key": "experience",
									"value": "{{EXP}}"
								},
								{
									"key": "job_title_id",
									"value": "{{JOB_ID}}"
								},
								{
									"key": "location",
									"value": "{{COUNTRY}}"
								},
								{
									"key": "position_level_id",
									"value": "{{POS_LVL}}"
								},
								{
									"key": "rate_to",
									"value": "65536"
								},
								{
									"key": "skills[0][skill_id]",
									"value": "{{SKILL_ID_0}}"
								},
								{
									"key": "skills[0][skill_name]",
									"value": ""
								},
								{
									"key": "skills[1][skill_id]",
									"value": "{{SKILL_ID_1}}",
									"type": "text"
								},
								{
									"key": "skills[1][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[2][skill_id]",
									"value": "{{SKILL_ID_2}}",
									"type": "text"
								},
								{
									"key": "skills[2][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[3][skill_id]",
									"value": "{{SKILL_ID_3}}",
									"type": "text"
								},
								{
									"key": "skills[3][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_id]",
									"value": "",
									"type": "text"
								},
								{
									"key": "skills[4][skill_name]",
									"value": "",
									"type": "text"
								},
								{
									"key": "vetted",
									"value": "{{VET}}"
								}
							]
						},
						"url": {
							"raw": "{{URL}}?AUT={{AUTH}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "AUT",
									"value": "{{AUTH}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for 65536 value is accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 is ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 ERROR - Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 ERROR - Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 ERROR - BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 ERROR - Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 ERROR - Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 ERROR - bad gateway\"] = true;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 ERROR - Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 ERROR - Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of responses. The code is\" + responseCode.code] = false;\r",
									"};\r",
									"\r",
									"\r",
									"// checking time response\r",
									"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
									"\r",
									"//checking response size\r",
									"pm.test(\"Response size is less than 1000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// making sure response body has all keys\r",
									"pm.test(\"New ID is in response\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ENG_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"JOB_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"POS_LVL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HRATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"VER\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DESCR\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SKILL_NAME\"));\r",
									"};\r",
									"\r",
									"\r",
									"// Making sure our test will not create any errors\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.not.be.null;\r",
									"    pm.expect(jsonResponse.searches[0].search_id).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if response body is in json format\r",
									"pm.test(\"Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Check first and last name ENV match\r",
									"pm.test(\"Check search_id and company_id mach with ENV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id.toString()).to.eql(pm.environment.get(\"SEARCH_ID\"));\r",
									"    pm.expect(jsonData.searches[0].company_id.toString()).to.eql(pm.environment.get(\"COMPANY_ID\"));\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_0\"));\r",
									"    pm.expect(jsonData.searches[0].skills[1].skill_id.toNumber()).to.eql(pm.environment.get(\"SKILL_ID_1\"));\r",
									"    // pm.expect(jsonData.searches[0].skills[0].skill_name.toString()).to.eql(pm.environment.get(\"SKILL_NAME_0\"));\r",
									"\r",
									"});\r",
									"\r",
									";\r",
									"// // Check if id is in UUIDs format\r",
									"// pm.test(\"Verify format of id\", function() {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.address.id).to.match(/[a-f0-9]{8}-[a-f0-9]{4}-[4][a-f0-9]{3}-[8-9a-b][a-f0-9]{3}-[a-f0-9]{12}/);\r",
									"// });\r",
									"\r",
									"// checking that header actually consists all necessary lines\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"//Here we are checking if response body is in certain format. You can use VAR or LET syntacsys in your code\r",
									"pm.test(\"Response body should be in certain format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.searches[0].search_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].company_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].job_title_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].position_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].position_level_name).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].location).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].description).to.be.a('string');\r",
									"    pm.expect(jsonData.searches[0].vetted).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].rate_to).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].experience).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].english_level_id).to.be.a('number');\r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[0].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[1].skill_id).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"    pm.expect(jsonData.searches[0].skills[1].skill_name).to.be.a('string'); // failing cause value can't be saved even if it's in environment \r",
									"});\r",
									"\r",
									"\r",
									"// Checking if our environment has element that equal certain value\r",
									"// pm.test(\"Object is contained\", () => {\r",
									"//     const expectedObject = {\r",
									"//         'status': pm.environment.get(\"STATUS\"),\r",
									"//         \"complete\": pm.environment.get(\"COMPLETE\")\r",
									"//     };\r",
									"//     pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"// }); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "ibench.net"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "{{AUTH}}"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"url": {
							"raw": "{{URL}}?search_id={{SEARCH_ID}}",
							"host": [
								"{{URL}}"
							],
							"query": [
								{
									"key": "search_id",
									"value": "{{SEARCH_ID}}"
								},
								{
									"key": "is_single_developer",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "https://ibench.net/api/users/search/results?search_id=1078",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "host",
										"value": "ibench.net"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "x-solt",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNywidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDEyOjM3OjM4LjAwMFoiLCJleHAiOjE2ODIxNjU1NjF9.nNWRPBToh6fanuglSahhcfaF3wthzqNoc0R_DJCtQX0"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "https://ibench.net/api/users/search/results?search_id=1078",
									"protocol": "https",
									"host": [
										"ibench",
										"net"
									],
									"path": [
										"api",
										"users",
										"search",
										"results"
									],
									"query": [
										{
											"key": "search_id",
											"value": "1078"
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "for research",
			"item": [
				{
					"name": "Create new account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"he instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"tests['Response Time is Acceptable'] = responseTime < 2000;\r",
									"\r",
									"pm.test(\"Response Size is less than 900B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx/1.10.3 (Ubuntu)\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be ok to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// One more way to set Env Var ID\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"ID\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "company_name",
									"value": "California QA Agency"
								},
								{
									"key": "country",
									"value": "United States"
								},
								{
									"key": "email",
									"value": "QAteams@gmail.com"
								},
								{
									"key": "password",
									"value": "123456"
								},
								{
									"key": "terms_accepted",
									"value": "1"
								},
								{
									"key": "type",
									"value": "1"
								}
							]
						},
						"url": {
							"raw": "https://ibench.net/api/auth/register",
							"protocol": "https",
							"host": [
								"ibench",
								"net"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit company account",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "x-solt",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEzMCwidHlwZSI6MSwiaXNkIjowLCJleHAiOjE2ODIxODI3OTd9.oyENSkLakC2bi0L1iLlNHLRNOiquUuc9kGHAx2bEzWo"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "address",
									"value": "1900 N Akard St Ste 100"
								},
								{
									"key": "business_phone",
									"value": "+1 214-111-8001"
								},
								{
									"key": "city",
									"value": "Florida"
								},
								{
									"key": "company_name",
									"value": "Texas QA Agency"
								},
								{
									"key": "country",
									"value": "United States"
								},
								{
									"key": "site",
									"value": "https://QAAgency.com"
								}
							]
						},
						"url": {
							"raw": "https://ibench.net/api/users/companies/",
							"protocol": "https",
							"host": [
								"ibench",
								"net"
							],
							"path": [
								"api",
								"users",
								"companies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "???Show lead Find Contracror in Marketplace",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "x-solt",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjEyNiwidHlwZSI6MSwiaXNkIjowLCJzc2UiOiIyMDIzLTA0LTE2VDA5OjAyOjMxLjAwMFoiLCJleHAiOjE2ODIxODMyNDJ9.kp40N7bawlwytMCUOWGIj4eEwI5CJJE4nLuDCWIxcp8"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "ibench.net"
							}
						],
						"url": {
							"raw": "https://ibench.net/api/users/marketplace/search/results?search_id=1119",
							"protocol": "https",
							"host": [
								"ibench",
								"net"
							],
							"path": [
								"api",
								"users",
								"marketplace",
								"search",
								"results"
							],
							"query": [
								{
									"key": "search_id",
									"value": "1119"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}